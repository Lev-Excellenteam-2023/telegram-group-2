import logging
from Database.firebase_db import DatabaseManager
import Gpt.gpt_session as gpt
from Utils.consts import PRESENTATION_OF_BOT_MSG, START_SESSION_MSG, HISTORY_DELETED_MSG

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

USER_DB = DatabaseManager()


def handle_message(user_id: str, msg_text: str):
    """
    Handles a user's message and generates a response using the GPT model.

    Args:
        user_id (str): The unique identifier of the user.
        msg_text (str): The text of the user's message.

    Returns:
        str: The response generated by the GPT model.
    """
    logger.info(f"Handling message for user {user_id}: {msg_text}")

    if not USER_DB.is_user_exist(user_id):
        logger.info(f"User {user_id} does not exist. Starting new session.")
        return START_SESSION_MSG

    user_history = USER_DB.get_conversation_history(user_id)

    response = gpt.call_openai_api(msg_text, user_history)
    logger.info(f"Bot response for user {user_id}: {response}")

    USER_DB.add_message_to_user(user_id, msg_text, response)

    return response


def check_or_create_user(user_id: str):
    """
    Checks if a user exists in the database, and creates the user if not found.

    Args:
        user_id (str): The unique identifier of the user.

    Returns:
        bool: True if a new user was created, False otherwise.
    """
    if not USER_DB.is_user_exist(user_id):
        USER_DB.insert_user(user_id)
        logger.info(f"Created new user: {user_id}")
        return True

    return False


def start_session(user_id: str):
    """
    Starts a new session for the user by deleting existing history if present.

    Args:
        user_id (str): The unique identifier of the user.

    Returns:
        str: A message indicating the start of a new session.
    """
    if USER_DB.is_user_exist(user_id):
        logger.info(f"Starting new session for user {user_id} and deleting existing history.")
        USER_DB.delete_user(user_id)

    USER_DB.insert_user(user_id)
    logger.info(f"New session started for user: {user_id}")

    return PRESENTATION_OF_BOT_MSG


def delete_user_history(user_id: str):
    """
    Deletes the conversation history for a user.

    Args:
        user_id (str): The unique identifier of the user.

    Returns:
        str: A message indicating whether the history was successfully deleted or  the user dont exist.
    """

    if USER_DB.is_user_exist(user_id):
        USER_DB.delete_user(user_id)
        logger.info(f"Deleted user history for user: {user_id}")
        return HISTORY_DELETED_MSG

    logger.error(f"try delete user id {user_id} that dont exist")
    return START_SESSION_MSG

